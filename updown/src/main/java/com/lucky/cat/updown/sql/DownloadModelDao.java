package com.lucky.cat.updown.sql;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lucky.cat.updown.sql.DownloadModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_MODEL".
*/
public class DownloadModelDao extends AbstractDao<DownloadModel, String> {

    public static final String TABLENAME = "DOWNLOAD_MODEL";

    /**
     * Properties of entity DownloadModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DownLoadUrl = new Property(0, String.class, "downLoadUrl", true, "DOWN_LOAD_URL");
        public final static Property SavePath = new Property(1, String.class, "savePath", false, "SAVE_PATH");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(3, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property CompleteSize = new Property(4, Long.class, "completeSize", false, "COMPLETE_SIZE");
        public final static Property Validate = new Property(5, String.class, "validate", false, "VALIDATE");
        public final static Property CreateTime = new Property(6, java.util.Date.class, "createTime", false, "CREATE_TIME");
    };


    public DownloadModelDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_MODEL\" (" + //
                "\"DOWN_LOAD_URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: downLoadUrl
                "\"SAVE_PATH\" TEXT NOT NULL ," + // 1: savePath
                "\"FILE_NAME\" TEXT," + // 2: fileName
                "\"FILE_SIZE\" INTEGER," + // 3: fileSize
                "\"COMPLETE_SIZE\" INTEGER," + // 4: completeSize
                "\"VALIDATE\" TEXT," + // 5: validate
                "\"CREATE_TIME\" INTEGER);"); // 6: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_MODEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadModel entity) {
        stmt.clearBindings();
 
        String downLoadUrl = entity.getDownLoadUrl();
        if (downLoadUrl != null) {
            stmt.bindString(1, downLoadUrl);
        }
        stmt.bindString(2, entity.getSavePath());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(3, fileName);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(4, fileSize);
        }
 
        Long completeSize = entity.getCompleteSize();
        if (completeSize != null) {
            stmt.bindLong(5, completeSize);
        }
 
        String validate = entity.getValidate();
        if (validate != null) {
            stmt.bindString(6, validate);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadModel readEntity(Cursor cursor, int offset) {
        DownloadModel entity = new DownloadModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // downLoadUrl
            cursor.getString(offset + 1), // savePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // fileSize
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // completeSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // validate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // createTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadModel entity, int offset) {
        entity.setDownLoadUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSavePath(cursor.getString(offset + 1));
        entity.setFileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileSize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCompleteSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setValidate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DownloadModel entity, long rowId) {
        return entity.getDownLoadUrl();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DownloadModel entity) {
        if(entity != null) {
            return entity.getDownLoadUrl();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
